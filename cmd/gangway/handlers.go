// Copyright © 2017 Heptio
// Copyright © 2017 Craig Tracey
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	htmltemplate "html/template"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"strings"

	"github.com/dgrijalva/jwt-go"
	"github.com/ghodss/yaml"
	"github.com/heptiolabs/gangway/internal/oidc"
	log "github.com/sirupsen/logrus"
	"golang.org/x/oauth2"
	policy "k8s.io/api/policy/v1beta1"
	rolev1 "k8s.io/api/rbac/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/types"
	clientcmdapi "k8s.io/client-go/tools/clientcmd/api/v1"

	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
)

const (
	templatesBase = "/templates"
)

// userInfo stores information about an authenticated user
type userInfo struct {
	ClusterName   string
	Username      string
	Claims        jwt.MapClaims
	KubeCfgUser   string
	IDToken       string
	RefreshToken  string
	ClientID      string
	ClientSecret  string
	IssuerURL     string
	APIServerURL  string
	ClusterCA     string
	HTTPPath      string
	UserNamespace string
}

// homeInfo is used to store dynamic properties on
type homeInfo struct {
	HTTPPath string
}

func serveTemplate(tmplFile string, data interface{}, w http.ResponseWriter) {
	var (
		templatePath string
		templateData []byte
		err          error
	)

	// Use custom templates if provided
	if cfg.CustomHTMLTemplatesDir != "" {
		templatePath = filepath.Join(cfg.CustomHTMLTemplatesDir, tmplFile)
		templateData, err = ioutil.ReadFile(templatePath)
	} else {
		templatePath = filepath.Join(templatesBase, tmplFile)
		// FSByte is generated by the esc file embedder
		// See https://github.com/mjibson/esc for more info.
		templateData, err = FSByte(false, templatePath)
	}

	if err != nil {
		log.Errorf("Failed to find template asset: %s at path: %s", tmplFile, templatePath)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	tmpl := htmltemplate.New(tmplFile)
	tmpl, err = tmpl.Parse(string(templateData))
	if err != nil {
		log.Errorf("Failed to parse template: %v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
	tmpl.ExecuteTemplate(w, tmplFile, data)
}

func generateKubeConfig(cfg *userInfo) clientcmdapi.Config {
	// fill out kubeconfig structure
	kcfg := clientcmdapi.Config{
		Kind:           "Config",
		APIVersion:     "v1",
		CurrentContext: cfg.ClusterName,
		Clusters: []clientcmdapi.NamedCluster{
			{
				Name: cfg.ClusterName,
				Cluster: clientcmdapi.Cluster{
					Server:                   cfg.APIServerURL,
					CertificateAuthorityData: []byte(cfg.ClusterCA),
				},
			},
		},
		Contexts: []clientcmdapi.NamedContext{
			{
				Name: cfg.ClusterName,
				Context: clientcmdapi.Context{
					Cluster:  cfg.ClusterName,
					AuthInfo: cfg.KubeCfgUser,
				},
			},
		},
		AuthInfos: []clientcmdapi.NamedAuthInfo{
			{
				Name: cfg.KubeCfgUser,
				AuthInfo: clientcmdapi.AuthInfo{
					AuthProvider: &clientcmdapi.AuthProviderConfig{
						Name: "oidc",
						Config: map[string]string{
							"client-id":      cfg.ClientID,
							"client-secret":  cfg.ClientSecret,
							"id-token":       cfg.IDToken,
							"idp-issuer-url": cfg.IssuerURL,
							"refresh-token":  cfg.RefreshToken,
						},
					},
				},
			},
		},
	}
	return kcfg
}

func loginRequired(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		session, err := gangwayUserSession.Session.Get(r, "gangway_id_token")
		if err != nil {
			http.Redirect(w, r, cfg.GetRootPathPrefix(), http.StatusTemporaryRedirect)
			return
		}

		if session.Values["id_token"] == nil {
			http.Redirect(w, r, cfg.GetRootPathPrefix(), http.StatusTemporaryRedirect)
			return
		}

		next.ServeHTTP(w, r)
	})
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
	data := &homeInfo{
		HTTPPath: cfg.HTTPPath,
	}

	serveTemplate("home.tmpl", data, w)
}

func loginHandler(w http.ResponseWriter, r *http.Request) {

	b := make([]byte, 32)
	rand.Read(b)
	state := url.QueryEscape(base64.StdEncoding.EncodeToString(b))

	session, err := gangwayUserSession.Session.Get(r, "gangway")
	if err != nil {
		log.Errorf("Got an error in login: %s", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	session.Values["state"] = state
	err = session.Save(r, w)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	audience := oauth2.SetAuthURLParam("audience", cfg.Audience)
	url := oauth2Cfg.AuthCodeURL(state, audience)

	http.Redirect(w, r, url, http.StatusTemporaryRedirect)
}

func logoutHandler(w http.ResponseWriter, r *http.Request) {
	gangwayUserSession.Cleanup(w, r, "gangway")
	gangwayUserSession.Cleanup(w, r, "gangway_id_token")
	gangwayUserSession.Cleanup(w, r, "gangway_refresh_token")
	http.Redirect(w, r, cfg.GetRootPathPrefix(), http.StatusTemporaryRedirect)
}

func callbackHandler(w http.ResponseWriter, r *http.Request) {
	ctx := context.WithValue(r.Context(), oauth2.HTTPClient, transportConfig.HTTPClient)

	// load up session cookies
	session, err := gangwayUserSession.Session.Get(r, "gangway")
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	sessionIDToken, err := gangwayUserSession.Session.Get(r, "gangway_id_token")
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	sessionRefreshToken, err := gangwayUserSession.Session.Get(r, "gangway_refresh_token")
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// verify the state string
	state := r.URL.Query().Get("state")

	if state != session.Values["state"] {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}

	// use the access code to retrieve a token
	code := r.URL.Query().Get("code")
	token, err := o2token.Exchange(ctx, code)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	sessionIDToken.Values["id_token"] = token.Extra("id_token")
	sessionRefreshToken.Values["refresh_token"] = token.RefreshToken

	// save the session cookies
	err = session.Save(r, w)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	err = sessionIDToken.Save(r, w)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	err = sessionRefreshToken.Save(r, w)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	http.Redirect(w, r, fmt.Sprintf("%s/commandline", cfg.HTTPPath), http.StatusSeeOther)
}

func commandlineHandler(w http.ResponseWriter, r *http.Request) {
	info := generateInfo(w, r)
	if info == nil {
		// generateInfo writes to the ResponseWriter if it encounters an error.
		// TODO(abrand): Refactor this.
		return
	}

	serveTemplate("commandline.tmpl", info, w)
}

func kubeConfigHandler(w http.ResponseWriter, r *http.Request) {
	info := generateInfo(w, r)
	if info == nil {
		// generateInfo writes to the ResponseWriter if it encounters an error.
		// TODO(abrand): Refactor this.
		return
	}

	d, err := yaml.Marshal(generateKubeConfig(info))
	if err != nil {
		log.Errorf("Error creating kubeconfig - %s", err.Error())
		http.Error(w, "Error creating kubeconfig", http.StatusInternalServerError)
		return
	}

	// tell the browser the returned content should be downloaded
	w.Header().Add("Content-Disposition", "Attachment")
	w.Write(d)
}

func generateInfo(w http.ResponseWriter, r *http.Request) *userInfo {
	// read in public ca.crt to output in commandline copy/paste commands
	file, err := os.Open(cfg.ClusterCAPath)
	if err != nil {
		// let us know that we couldn't open the file. This only cause missing output
		// does not impact actual function of program
		log.Errorf("Failed to open CA file. %s", err)
	}
	defer file.Close()
	caBytes, err := ioutil.ReadAll(file)
	if err != nil {
		log.Warningf("Could not read CA file: %s", err)
	}

	// load the session cookies
	sessionIDToken, err := gangwayUserSession.Session.Get(r, "gangway_id_token")
	if err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return nil
	}
	sessionRefreshToken, err := gangwayUserSession.Session.Get(r, "gangway_refresh_token")
	if err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return nil
	}

	idToken, ok := sessionIDToken.Values["id_token"].(string)
	if !ok {
		gangwayUserSession.Cleanup(w, r, "gangway")
		gangwayUserSession.Cleanup(w, r, "gangway_id_token")
		gangwayUserSession.Cleanup(w, r, "gangway_refresh_token")

		http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
		return nil
	}

	refreshToken, ok := sessionRefreshToken.Values["refresh_token"].(string)
	if !ok {
		gangwayUserSession.Cleanup(w, r, "gangway")
		gangwayUserSession.Cleanup(w, r, "gangway_id_token")
		gangwayUserSession.Cleanup(w, r, "gangway_refresh_token")

		http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
		return nil
	}

	jwtToken, err := oidc.ParseToken(idToken, cfg.ClientSecret)
	if err != nil {
		http.Error(w, "Could not parse JWT", http.StatusInternalServerError)
		return nil
	}

	claims := jwtToken.Claims.(jwt.MapClaims)
	username, ok := claims[cfg.UsernameClaim].(string)
	if !ok {
		http.Error(w, "Could not parse Username claim", http.StatusInternalServerError)
		return nil
	}

	kubeCfgUser := strings.Join([]string{username, cfg.ClusterName}, "@")

	if cfg.EmailClaim != "" {
		log.Warn("using the Email Claim config setting is deprecated. Gangway uses `UsernameClaim@ClusterName`. This field will be removed in a future version.")
	}

	issuerURL, ok := claims["iss"].(string)
	if !ok {
		http.Error(w, "Could not parse Issuer URL claim", http.StatusInternalServerError)
		return nil
	}

	if cfg.ClientSecret == "" {
		log.Warn("Setting an empty Client Secret should only be done if you have no other option and is an inherent security risk.")
	}

	// Create namespace for clientID
	clientset, err := getConfig("")

	if err != nil {
		log.Warningf("Config issue for creating namespace. Error = %v", err)
	}

	namespace, namespace_err := createUserNamespace(username, clientset)
	if namespace_err != nil {
		if statusError, isStatus := namespace_err.(*errors.StatusError); isStatus {
			log.Warningf("Error = %s\n", statusError.ErrStatus.Message)
		} else {
			log.Warningf("Error creating namespace %v\n", namespace_err.Error())
		}
	}

	policy_err := createPSPPolicy("autoprovisioned-psp-policy", clientset)
	if policy_err != nil {
		if statusError, isStatus := policy_err.(*errors.StatusError); isStatus {
			log.Warningf("Error = %s\n", statusError.ErrStatus.Message)
		} else {
			log.Warningf("Error creating psp %v\n", policy_err.Error())
		}
	}

	clusterrole_err := createClusterRoleForPSP("clusterole-autoprovisioned-psp", clientset)
	if clusterrole_err != nil {
		if statusError, isStatus := clusterrole_err.(*errors.StatusError); isStatus {
			log.Warningf("Error = %s\n", statusError.ErrStatus.Message)
		} else {
			log.Warningf("Error creating cluster role %v\n", clusterrole_err.Error())
		}
	}

	rolebinding_psp_err := createRoleBindingForPSP(namespace, "clusterole-autoprovisioned-psp", clientset)
	if rolebinding_psp_err != nil {
		if statusError, isStatus := rolebinding_psp_err.(*errors.StatusError); isStatus {
			log.Warningf("Error = %s\n", statusError.ErrStatus.Message)
		} else {
			log.Warningf("Error creating role binding for psp %v\n", rolebinding_psp_err.Error())
		}
	}

	rolebinding_err := createRoleBindingForUser(namespace, username, clientset)
	if rolebinding_err != nil {
		if statusError, isStatus := rolebinding_err.(*errors.StatusError); isStatus {
			log.Warningf("Error = %s\n", statusError.ErrStatus.Message)
		} else {
			log.Warningf("Error creating role binding for user %v\n", rolebinding_err.Error())
		}
	}

	info := &userInfo{
		ClusterName:   cfg.ClusterName,
		Username:      username,
		Claims:        claims,
		KubeCfgUser:   kubeCfgUser,
		IDToken:       idToken,
		RefreshToken:  refreshToken,
		ClientID:      cfg.ClientID,
		ClientSecret:  cfg.ClientSecret,
		IssuerURL:     issuerURL,
		APIServerURL:  cfg.APIServerURL,
		ClusterCA:     string(caBytes),
		HTTPPath:      cfg.HTTPPath,
		UserNamespace: namespace,
	}

	return info
}

func createUserNamespace(emailAddress string, clientset *kubernetes.Clientset) (string, error) {

	// Split string with "." and join them. Later split with @ and join with first 2 characters of the domain.
	namespace := createUniqueNamespaceString(emailAddress)

	_, err := clientset.CoreV1().Namespaces().Get(context.TODO(), namespace, metav1.GetOptions{})
	if errors.IsNotFound(err) {
		fmt.Printf("Namespace %s not found\n", namespace)
	} else if err != nil {
		return "", err
	} else {
		fmt.Printf("namespace %s already exists\n", namespace)
		return namespace, nil
	}

	fmt.Printf("Creating namespace %s \n", namespace)
	createOptions := metav1.CreateOptions{}

	nsSpec := &v1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: namespace}}
	ns, err := clientset.CoreV1().Namespaces().Create(context.TODO(), nsSpec, createOptions)
	if err != nil {
		return "", err
	} else {
		fmt.Printf("Namespace created.. %s \n", ns.ObjectMeta.Name)

		labelPatch := `[{"op": "add", "path": "/metadata/labels", "value": {"autoprovisioned": "true" }}]`
		fmt.Printf("label patch = %s", labelPatch)

		_, err = clientset.CoreV1().Namespaces().Patch(context.TODO(), namespace, types.JSONPatchType, []byte(labelPatch), metav1.PatchOptions{})

		if statusError, isStatus := err.(*errors.StatusError); isStatus {
			fmt.Printf("Error applying label patch %v\n", statusError)
			return "", err
		} else if err != nil {
			fmt.Printf("Error patching label for namespace %s, error=%v\n", namespace, err.Error())
			return "", err
		}
	}

	return namespace, nil
}

func createUniqueNamespaceString(emailAddress string) (namespace string) {
	// Split string with "." and join them. Later split with @ and join with first 2 characters of the domain.
	fmt.Printf("Email=%s \n", emailAddress)
	emailWithDash := strings.Join(strings.Split(emailAddress, "."), "-")
	fmt.Printf("Email with Dot Replaced with dash=%s \n", emailWithDash)

	stringArray := strings.Split(emailWithDash, "@")
	strippedDomain := "xiq"

	if len(stringArray) > 1 {
		domainName := stringArray[1]
		strippedDomain = "x" + domainName[0:2]
	}

	newStringArray := []string{strippedDomain, stringArray[0]}

	namespace = strings.Join(newStringArray, "-")
	if len(namespace) > 63 {
		namespace = namespace[0:63]
	}

	return strings.ToLower(namespace)
}

func getConfig(pathToConfig string) (*kubernetes.Clientset, error) {
	var config *rest.Config
	var err error

	fmt.Printf("Path to config = %s \n", pathToConfig)
	if pathToConfig == "" {
		fmt.Printf("Checking in cluster config.. \n")
		// creates the in-cluster config
		config, err = rest.InClusterConfig()
	} else {
		// use the current context in kubeconfig
		config, err = clientcmd.BuildConfigFromFlags("", pathToConfig)
	}

	if err != nil {
		return nil, err
	}

	// creates the clientset
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		return nil, err
	}

	return clientset, err
}

func createRoleBindingForUser(namespace string, emailAddress string, clientset *kubernetes.Clientset) error {

	roleBindings, err := clientset.RbacV1().RoleBindings(namespace).List(context.TODO(), metav1.ListOptions{})
	if err != nil {
		return err
	}

	roleBindingExists := false
	roleBindingName := namespace + "-rb"
	for _, ns := range roleBindings.Items {
		if ns.ObjectMeta.Name == roleBindingName {
			roleBindingExists = true
			break
		}
	}

	if !roleBindingExists {
		fmt.Printf("Creating rolebinding %s \n", roleBindingName)
		createOptions := metav1.CreateOptions{}

		subject := rolev1.Subject{Kind: "User", APIGroup: "rbac.authorization.k8s.io", Name: emailAddress}
		subjectArray := []rolev1.Subject{subject}

		roleRef := rolev1.RoleRef{Kind: "ClusterRole", APIGroup: "rbac.authorization.k8s.io", Name: "admin"}

		roleBindingSpec := &rolev1.RoleBinding{Subjects: subjectArray, RoleRef: roleRef, ObjectMeta: metav1.ObjectMeta{Name: roleBindingName}}

		rb, err := clientset.RbacV1().RoleBindings(namespace).Create(context.TODO(), roleBindingSpec, createOptions)
		if err != nil {
			return err
		}
		fmt.Printf("RoleBinding created.. %s \n", rb.ObjectMeta.Name)
	}

	return nil
}

func createPSPPolicy(psp_name string, clientset *kubernetes.Clientset) error {

	psp_policy, err := clientset.PolicyV1beta1().PodSecurityPolicies().Get(context.TODO(), psp_name, metav1.GetOptions{})
	if errors.IsNotFound(err) {
		fmt.Printf("psp_policy not found\n")
	} else if err != nil {
		return err
	} else {
		fmt.Printf("autoprovisioned-psp-policy already exists..\n")
		return nil
	}

	// Create a PSP with strategies that will populate a blank psc
	allowPrivilegeEscalation := false
	volumeOptions := []policy.FSType{"configMap", "emptyDir", "projected", "secret", "downwardAPI", "persistentVolumeClaim"}
	createPSP := func() *policy.PodSecurityPolicy {
		return &policy.PodSecurityPolicy{
			ObjectMeta: metav1.ObjectMeta{
				Name: psp_name,
			},
			Spec: policy.PodSecurityPolicySpec{
				AllowPrivilegeEscalation: &allowPrivilegeEscalation,
				RunAsUser: policy.RunAsUserStrategyOptions{
					Rule: policy.RunAsUserStrategyMustRunAsNonRoot,
				},
				RunAsGroup: &policy.RunAsGroupStrategyOptions{
					Rule: policy.RunAsGroupStrategyRunAsAny,
				},
				SELinux: policy.SELinuxStrategyOptions{
					Rule: policy.SELinuxStrategyRunAsAny,
				},
				FSGroup: policy.FSGroupStrategyOptions{
					Rule: policy.FSGroupStrategyMayRunAs,
				},
				SupplementalGroups: policy.SupplementalGroupsStrategyOptions{
					Rule: policy.SupplementalGroupsStrategyMayRunAs,
				},
				Volumes: volumeOptions,
			},
		}
	}

	psp := createPSP()

	psp_policy, err = clientset.PolicyV1beta1().PodSecurityPolicies().Create(context.TODO(), psp, metav1.CreateOptions{})
	if err != nil {
		return err
	} else {
		fmt.Printf("Psp policy created with response %s\n", psp_policy.ObjectMeta.Name)
	}

	return nil
}

func createClusterRoleForPSP(clusterrole string, clientset *kubernetes.Clientset) error {

	_, err := clientset.RbacV1().ClusterRoles().Get(context.TODO(), clusterrole, metav1.GetOptions{})
	if errors.IsNotFound(err) {
		fmt.Printf("cluster role %s not found\n", clusterrole)
	} else if err != nil {
		return err
	} else {
		fmt.Printf("clusterrole %s already exists..\n", clusterrole)
		return nil
	}

	fmt.Printf("Creating cluster role %s \n", clusterrole)
	createOptions := metav1.CreateOptions{}

	policyRule := rolev1.PolicyRule{
		Verbs:         []string{"Use"},
		APIGroups:     []string{"policy"},
		Resources:     []string{"podsecuritypolicies"},
		ResourceNames: []string{"autoprovisioned-psp-policy"},
	}

	rulesArray := []rolev1.PolicyRule{policyRule}

	clusterRoleSpec := &rolev1.ClusterRole{
		ObjectMeta: metav1.ObjectMeta{Name: clusterrole},
		Rules:      rulesArray,
	}

	rb, err := clientset.RbacV1().ClusterRoles().Create(context.TODO(), clusterRoleSpec, createOptions)
	if err != nil {
		return err
	}
	fmt.Printf("Cluster Role %s created..\n", rb.ObjectMeta.Name)

	return nil
}

func createRoleBindingForPSP(namespace string, clusterrole string, clientset *kubernetes.Clientset) error {

	roleBindings, err := clientset.RbacV1().RoleBindings(namespace).List(context.TODO(), metav1.ListOptions{})
	if err != nil {
		return err
	}

	roleBindingExists := false
	roleBindingName := namespace + "-psp-rb"
	for _, ns := range roleBindings.Items {
		if ns.ObjectMeta.Name == roleBindingName {
			roleBindingExists = true
			break
		}
	}

	if !roleBindingExists {
		fmt.Printf("Creating rolebinding %s \n", roleBindingName)
		createOptions := metav1.CreateOptions{}

		sa_subject := rolev1.Subject{Kind: "Group", APIGroup: "rbac.authorization.k8s.io", Name: "system:serviceaccounts"}
		authenticated_subject := rolev1.Subject{Kind: "Group", APIGroup: "rbac.authorization.k8s.io", Name: "system:authenticated"}
		subjectArray := []rolev1.Subject{sa_subject, authenticated_subject}

		roleRef := rolev1.RoleRef{Kind: "ClusterRole", APIGroup: "rbac.authorization.k8s.io", Name: clusterrole}

		roleBindingSpec := &rolev1.RoleBinding{Subjects: subjectArray, RoleRef: roleRef, ObjectMeta: metav1.ObjectMeta{Name: roleBindingName}}

		rb, err := clientset.RbacV1().RoleBindings(namespace).Create(context.TODO(), roleBindingSpec, createOptions)
		if err != nil {
			return err
		}
		fmt.Printf("RoleBinding created.. %s \n", rb.ObjectMeta.Name)
	}

	return nil
}

func createLimitRanger(namespace string, clientset *kubernetes.Clientset) error {
	limitRangeName := namespace + "-limitRange"

	limitRange, err := clientset.CoreV1().LimitRanges(namespace).Get(context.TODO(), limitRangeName, metav1.GetOptions{})
	if errors.IsNotFound(err) {
		fmt.Printf("limit Range not found\n")
	} else if err != nil {
		return err
	} else {
		fmt.Printf("limit range %s already exists..\n", limitRangeName)
		return nil
	}

	// Create a Limit Range Object with default request and limits.

	limitRangeObj := &v1.LimitRange{
		ObjectMeta: metav1.ObjectMeta{Name: limitRangeName},
		Spec: v1.LimitRangeSpec{
			Limits: []v1.LimitRangeItem{
				{
					Type:                 v1.LimitTypeContainer,
					DefaultRequest:       getResourceList("50m", "100Mi"),
					Default:              getResourceList("200m", "500Mi"),
					MaxLimitRequestRatio: v1.ResourceList{},
				},
			},
		},
	}

	limitRange, err = clientset.CoreV1().LimitRanges(namespace).Create(context.TODO(), limitRangeObj, metav1.CreateOptions{})
	if err != nil {
		return err
	} else {
		fmt.Printf("Psp policy created with response %s\n", limitRange.ObjectMeta.Name)
	}

	return nil
}

func getResourceList(cpu, memory string) v1.ResourceList {
	res := v1.ResourceList{}
	if cpu != "" {
		res[v1.ResourceCPU] = resource.MustParse(cpu)
	}
	if memory != "" {
		res[v1.ResourceMemory] = resource.MustParse(memory)
	}

	return res
}
